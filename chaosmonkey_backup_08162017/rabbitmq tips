RabbitMQ 

One way::
1. Install using Helm - e.g. 
$ helm install --name my-release --set rabbitmqUsername=admin,rabbitmqPassword=secretpassword,rabbitmqErlangCookie=secretcookie stable/rabbitmq

2. Now you can connect to the rabbitMQ via PIKA as:
Sahdevs-MBP:rabbitmq sahdevzala$ cat test-pika.py
#!/usr/bin/env python
import pika

# this queue is the destination queue
credentials = pika.PlainCredentials('admin', 'secretpassword')
parameters = pika.ConnectionParameters('192.168.99.100', 32340, '/', credentials)
connection = pika.BlockingConnection(parameters)
print " connection created"
Sahdevs-MBP:rabbitmq sahdevzala$ python test-pika.py
 connection created
Sahdevs-MBP:rabbitmq sahdevzala$

Another way::
1. Install using Helm - e.g. 
$ helm install --name my-release --set rabbitmqUsername=admin,rabbitmqPassword=secretpassword,rabbitmqErlangCookie=secretcookie stable/rabbitmq

2. 

To Access the RabbitMQ Management interface:

  export POD_NAME=$(kubectl get pods --namespace default -l "app=my-release-rabbitmq" -o jsonpath="{.items[0].metadata.name}")
  echo URL : http://127.0.0.1:15672
  kubectl port-forward $POD_NAME 15672:15672

(OR do this i.e. forward all ports : Sahdevs-MBP:nginxdeployandservice sahdevzala$ kubectl port-forward $POD_NAME 4369 5672 25672 15672  ) 

To access the RabbitMQ from within cluster modify test-pika.py as below i.e. instead of 127.0.0.1 use my-release-rabbitmq.default.svc.cluster.local
Sahdevs-MBP:rabbitmq sahdevzala$ cat test-pika.py
#!/usr/bin/env python
import pika

# this queue is the destination queue
credentials = pika.PlainCredentials('admin', 'secretpassword')
parameters = pika.ConnectionParameters('my-release-rabbitmq.default.svc.cluster.local', 32340, '/', credentials)
connection = pika.BlockingConnection(parameters)
print " connection created"

Also, the result of deployment of help chart gives this message:
The RabbitMQ AMQP port 5672 can be accessed on the following DNS name from within your cluster: my-release-rabbitmq.default.svc.cluster.local

  echo Username      : admin
  echo Password      : $(kubectl get secret --namespace default my-release-rabbitmq -o jsonpath="{.data.rabbitmq-password}" | base64 --decode)
  echo ErLang Cookie : $(kubectl get secret --namespace default my-release-rabbitmq -o jsonpath="{.data.rabbitmq-erlang-cookie}" | base64 --decode)


Commands:

$curl 192.168.99.100:32340 -v

 --------------
 RabbitMQ:
https://kubeapps.com/charts/stable/rabbitmq

To install run: 

$ helm install --name my-release --set rabbitmqUsername=admin,rabbitmqPassword=secretpassword,rabbitmqErlangCookie=secretcookie stable/rabbitmq
NAME:   my-release
LAST DEPLOYED: Mon Jul 31 17:29:40 2017
NAMESPACE: default
STATUS: DEPLOYED

RESOURCES:
==> v1/Service
NAME                 CLUSTER-IP  EXTERNAL-IP  PORT(S)                                AGE
my-release-rabbitmq  10.0.0.129  <none>       4369/TCP,5672/TCP,25672/TCP,15672/TCP  1s

==> v1beta1/Deployment
NAME                 DESIRED  CURRENT  UP-TO-DATE  AVAILABLE  AGE
my-release-rabbitmq  1        1        1           0          1s

==> v1/Secret
NAME                 TYPE    DATA  AGE
my-release-rabbitmq  Opaque  2     1s

==> v1/PersistentVolumeClaim
NAME                 STATUS  VOLUME                                    CAPACITY  ACCESSMODES  STORAGECLASS  AGE
my-release-rabbitmq  Bound   pvc-5cb70a4a-7637-11e7-b97e-0800276e09b4  8Gi       RWO          standard      1s


NOTES:

** P.S. RabbitMQ may take a few minutes to become available. Please be patient. **

The RabbitMQ AMQP port 5672 can be accessed on the following DNS name from within your cluster: my-release-rabbitmq.default.svc.cluster.local

  echo Username      : admin
  echo Password      : $(kubectl get secret --namespace default my-release-rabbitmq -o jsonpath="{.data.rabbitmq-password}" | base64 --decode)
  echo ErLang Cookie : $(kubectl get secret --namespace default my-release-rabbitmq -o jsonpath="{.data.rabbitmq-erlang-cookie}" | base64 --decode)

To Access the RabbitMQ Management interface:

  export POD_NAME=$(kubectl get pods --namespace default -l "app=my-release-rabbitmq" -o jsonpath="{.items[0].metadata.name}")
  echo URL : http://127.0.0.1:15672
  kubectl port-forward $POD_NAME 15672:15672

(OR do this i.e. forward all ports : Sahdevs-MBP:nginxdeployandservice sahdevzala$ kubectl port-forward $POD_NAME 4369 5672 25672 15672  ) 

----

$python player1_sender.py
$ python player1_sender.py
 [x] Sent 'Pong this ping!'

$ python player2_receiver.py
 [*] Waiting for ping back. To exit press CTRL+C
 [x] Received ping 'Pong this ping!'
